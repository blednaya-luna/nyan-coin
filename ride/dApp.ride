{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func getNumberByKey(key: String) = {
  match getInteger(this, key) {
    case number:Int => number
    case _ => 0
  }
}

let NONE = "none"
func getStringByKey(key: String) = {
  match getString(this, key) {
    case string:String => string
    case _ => NONE
  }
}

func getBooleanByKey(key: String) = {
  match getBoolean(this, key) {
    case boolean:Boolean => boolean
    case _ => false
  }
}

func getNyanTokenKey() = {
  "dApp_<" + toBase58String(this.bytes) +">_tokenId"
}
func getNyanTokenValue() = {
  getStringByKey(getNyanTokenKey())
}

func getUserEmailKey(userAddress: String) = {
  "user_<" + userAddress + ">_email"
}
func getUserEmailValue(userAddress: String) = {
  getStringByKey(getUserEmailKey(userAddress))
}

func getUserResponsibleKey(userAddress: String) = {
  "user_<" + userAddress + ">_responsible"
}
func getUserResponsibleValue(userAddress: String) = {
  getBooleanByKey(getUserResponsibleKey(userAddress))
}

func getAssetPriceKey(assetId: String) = {
  "asset_<" + assetId + ">_price"
}
func getAssetPriceValue(assetId: String) = {
  getNumberByKey(getAssetPriceKey(assetId))
}

func getOrderAssetIdKey(orderId: String) = {
  "order_<" + orderId + ">_asset" 
}
func getOrderAssetIdValue(orderId: String) = {
  getStringByKey(getOrderAssetIdKey(orderId))
}

func getOrderAmountKey(orderId: String) = {
  "order_<" + orderId + ">_amount" 
}
func getOrderAmountValue(orderId: String) = {
  getNumberByKey(getOrderAmountKey(orderId))
}

func getOrderUserAddressKey(orderId: String) = {
  "order_<" + orderId + ">_user" 
}
func getOrderUserAddressValue(orderId: String) = {
  getStringByKey(getOrderUserAddressKey(orderId))
}

func getOrderStatusKey(orderId: String) = {
  "order_<" + orderId + ">_status" 
}
func getOrderStatusValue(orderId: String) = {
  getStringByKey(getOrderStatusKey(orderId))
}

func isAdmin(caller: Address) = {
  this == caller
}
func isResponsible(caller: Address) = {
  getUserResponsibleValue(toBase58String(caller.bytes))
}

@Callable(i)
func signUp(email: String) = {
  let userAddress = toBase58String(i.caller.bytes)
  let userEmail = getUserEmailValue(userAddress)

  if (userEmail != NONE) then {
    throw("User " + userEmail + " is already registered")
  } else {
    [
      StringEntry(getUserEmailKey(userAddress), email),
      BooleanEntry(getUserResponsibleKey(userAddress), false)
    ]
  }
}

@Callable(i)
func issueNyanToken(quantity: Int) = {
  let nyanToken = getNyanTokenValue()

  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (nyanToken != NONE) then {
    throw("NYAN Token is already issued")
  } else {
    let nyanTokenIssue = Issue("NYAN Token", "NYAN Token is a cryptocurrency token that operates on the Waves platform", quantity, 0, true)
    let nyanTokenAssetId = nyanTokenIssue.calculateAssetId()
    [
      nyanTokenIssue,
      StringEntry(getNyanTokenKey(), toBase58String(nyanTokenAssetId))
    ]
  }
}

@Callable(i)
func reissueNyanToken(quantity: Int) = {
  let nyanToken = getNyanTokenValue()

  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (nyanToken == NONE) then {
    throw("NYAN Token was not issued")
  } else {
    [
      Reissue(fromBase58String(nyanToken), quantity, true)
    ]
  }
}

@Callable(i)
func transferNyanToken(recipient: String, amount: Int) = {
  let userEmail = getUserEmailValue(recipient)
  let nyanTokenAssetId = fromBase58String(getNyanTokenValue())
  let currentDAppBalance = assetBalance(this, nyanTokenAssetId)
  let newDAppBalance = currentDAppBalance - amount

  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (userEmail == NONE) then {
    throw("You cannot transfer NYAN Token to an unregistered user")
  } else if (amount < 0) then {
    throw("You cannot transfer a negative amount")
  } else if (newDAppBalance < 0) then {
    throw("Not enough NYAN Token to transfer")
  } else {
    [
      ScriptTransfer(Address(fromBase58String(recipient)), amount, nyanTokenAssetId)
    ]
  }
}

@Callable(i)
func issueAssetToken(name: String, description: String, quantity: Int, price: Int, data: String) = {
  let assetTokenIssue = Issue(name, description, quantity, 0, true)
  let assetTokenAssetId = assetTokenIssue.calculateAssetId()
  let assetToken = toBase58String(assetTokenAssetId)

  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (quantity == 0) then {
    [
      assetTokenIssue,
      IntegerEntry(getAssetPriceKey(assetToken), price)
    ]
  } else {
    let nyanTokenAssetId = fromBase58String(getNyanTokenValue())
    let currentDAppBalance = assetBalance(this, nyanTokenAssetId)
    let amount = quantity * price
    let newDAppBalance = currentDAppBalance - amount

    if (newDAppBalance < 0) then {
      throw("Not enough NYAN Token to issue an asset")
    } else {
      [
        assetTokenIssue,
        Burn(nyanTokenAssetId, amount),
        IntegerEntry(getAssetPriceKey(assetToken), price)
      ]
    }
  }
}

@Callable(i)
func reissueAssetToken(assetId: String, quantity: Int) = {
  let nyanTokenAssetId = fromBase58String(getNyanTokenValue())
  let currentDAppBalance = assetBalance(this, nyanTokenAssetId)
  let price = getAssetPriceValue(assetId)
  let amount = quantity * price
  let newDAppBalance = currentDAppBalance - amount

  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (newDAppBalance < 0) then {
    throw("Not enough NYAN Token to reissue an asset")
  } else {
    [
      Reissue(fromBase58String(assetId), quantity, true),
      Burn(nyanTokenAssetId, amount)
    ]
  }
}

@Callable(i)
func exchangeAssetToken(assetId: String, amount: Int) = {
  let payments = i.payments

  if (size(payments) == 0) then {
    throw("You need to attach the payment")
  } else {
    let paymentAmount = payments[0].amount
    let paymentAssetId = value(payments[0].assetId)
    let assetPrice = getAssetPriceValue(assetId)
    let assetAmount = amount * assetPrice
    let assetTokenAssetId = fromBase58String(assetId)


    if (paymentAmount < assetAmount) then {
      throw("Not enough NYAN Token to exchange an asset")
    } else if (paymentAmount == assetAmount) then {
      [
        ScriptTransfer(i.caller, amount, assetTokenAssetId),
        Burn(paymentAssetId, paymentAmount)
      ]
    } else {
      let paymentAmountChange = paymentAmount - assetAmount
      [
        ScriptTransfer(i.caller, amount, assetTokenAssetId),
        ScriptTransfer(i.caller, paymentAmountChange, paymentAssetId),
        Burn(paymentAssetId, assetAmount)
      ]
    }
  }
}

@Callable(i)
func setResponsibleStatus(userAddress: String) = {
  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (isResponsible(i.caller)) then {
    throw("User already have responsible status")
  } else {
    [
      BooleanEntry(getUserResponsibleKey(userAddress), true)
    ]
  }
}

@Callable(i)
func revokeResponsibleStatus(userAddress: String) = {
  if (!isAdmin(i.caller)) then {
    throw("Function invoke not allowed, requested from non-admin address")
  } else if (!isResponsible(i.caller)) then {
    throw("User already don't have responsible status")
  } else {
    [
      BooleanEntry(getUserResponsibleKey(userAddress), false)
    ]
  }
}

# WIP
@Callable(i)
func requestReward() = {
  let payments = i.payments

  if (size(payments) == 0) then {
    throw("You need to attach the payment")
  } else {
    # TODO check that it is our token
    let orderId = toBase58String(i.transactionId)
    let paymentAssetId = value(payments[0].assetId)
    let assetId = toBase58String(paymentAssetId)
    let amount = payments[0].amount
    let userAddress = toBase58String(i.caller.bytes)
    [
      StringEntry(getOrderAssetIdKey(orderId), assetId),
      IntegerEntry(getOrderAmountKey(orderId), amount),
      StringEntry(getOrderUserAddressKey(orderId), userAddress),
      StringEntry(getOrderStatusKey(orderId), "NEW"),
      Burn(paymentAssetId, amount)
    ]
  }
}

# WIP
@Callable(i)
func getRequestToWork(orderId: String) = {
  let orderStatus = getOrderStatusValue(orderId)

  if (!isResponsible(i.caller)) then {
    throw("rejected")
  } else if (orderStatus == "WIP") then {
    throw("rejected")
  } else if (orderStatus == "DONE") then {
    throw("rejected")
  } else {
    [
      StringEntry(getOrderStatusKey(orderId), "WIP")
    ]
  }
}

# WIP
@Callable(i)
func closeOrder(orderId: String) = {
  let orderStatus = getOrderStatusValue(orderId)

  if (!isResponsible(i.caller)) then {
    throw("rejected")
  } else if (orderStatus == "NEW") then {
    throw("rejected")
  } else if (orderStatus == "DONE") then {
    throw("rejected")
  } else {
    [
      StringEntry(getOrderStatusKey(orderId), "DONE")
    ]
  }
}

@Verifier(tx)
func verify() = {
  match tx {
      case _:InvokeScriptTransaction => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
      case _ => tx.sender == this && sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
}
